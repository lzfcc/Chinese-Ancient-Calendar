export const HexoList64 = [
  "坤䷁",
  "剝䷖",
  "比䷇",
  "觀䷓",
  "豫䷏",
  "晉䷢",
  "萃䷬",
  "否䷋",
  "謙䷎",
  "艮䷳",
  "蹇䷦",
  "漸䷴",
  "小過䷽",
  "旅䷷",
  "咸䷞",
  "遯䷠",
  "師䷆",
  "蒙䷃",
  "坎䷜",
  "渙䷺",
  "解䷧",
  "未濟䷿",
  "困䷮",
  "訟䷅",
  "升䷭",
  "蠱䷑",
  "井䷯",
  "巽䷸",
  "恆䷟",
  "鼎䷱",
  "大過䷛",
  "姤䷫",
  "復䷗",
  "頤䷚",
  "屯䷂",
  "益䷩",
  "震䷲",
  "噬嗑䷔",
  "隨䷐",
  "无妄䷘",
  "明夷䷣",
  "賁䷕",
  "旣濟䷾",
  "家人䷤",
  "豐䷶",
  "離䷝",
  "革䷰",
  "同人䷌",
  "臨䷒",
  "損䷨",
  "節䷻",
  "中孚䷼",
  "歸妹䷵",
  "睽䷥",
  "兌䷹",
  "履䷉",
  "泰䷊",
  "大畜䷙",
  "需䷄",
  "小畜䷈",
  "大壯䷡",
  "大有䷍",
  "夬䷪",
  "乾䷀",
];
export const HexoList8 = [
  "坤☷",
  "艮☶",
  "坎☵",
  "巽☴",
  "震☳",
  "離☲",
  "兌☱",
  "乾☰",
];

// !: 不知道後面還有沒有文字. ?: 殘損. 书中编号是xx-xxx
// 1数字：1一，2七，3未出现一七
// 2形式：1六爻单卦，2六爻对卦，3三爻，4四爻，5未知
// 3地域：1殷墟，2周原宗周，3楚，4其他
// 4时间：1晚商早周，2西周中晚期，3春秋，4战国，5其他
// 5材质：1骨，2铜，3陶石
// V: 11210
// VI: 21210
// VII: 21111
// VIII: 21113
export const HexoZhouList = {
  // 商周陶片銅器
  1001: ["13453", "161"],
  2002: ["35111", "666!"], // 贾排除
  3003: ["24111", "6776"],
  4004: ["21111", "757666"],
  4005: ["21111", "866587"],
  4006: ["21111", "787676"],
  5007: ["23111", "765"],
  6008: ["21111", "776766"],
  6009: ["21111", "678968"],
  6010: ["21111", "677679"],
  7011: ["11111", "116615"],
  7012: ["23111", "977"],
  7013: ["31111", "688866"], // 贾排除
  8014: ["21111", "666687"],
  8015: ["21111", "777867"],
  8016: ["21111", "686767"],
  9017: ["23112", "758"],
  10018: ["13112", "851"],
  11019: ["13112", "816"],
  12020: ["33112", "666"], // 贾排除
  13021: ["25113", "587!"], //
  14022: ["21113", "867666"],
  15023: ["21113", "??6667"], //
  15024: ["21113", "??7676"], //
  16025: ["11113", "611655"],
  16026: ["11113", "116616"],
  17027: ["11113", "151166"],
  18028: ["21113", "576877"],
  18029: ["21113", "776786"],
  19030: ["21113", "!67786"], //
  19031: ["21113", "67677!"],
  20032: ["21113", "667668"],
  20033: ["21113", "667675"],
  21034: ["11413", "188611"],
  22035: ["11213", "518166"],
  23036: ["21113", "766667"],
  23037: ["21113", "768767"],
  23038: ["21113", "665768"],
  23039: ["11113", "811166"],
  23040: ["11113", "811116"],
  23041: ["21113", "667668"],
  24042: ["11211", "681151"],
  24043: ["11211", "511681"],
  24044: ["11211", "668116"],
  24045: ["11211", "616661"],
  26046: ["11211", "116111"],
  27047: ["21211", "587878"],
  28048: ["21211", "766766"],
  29049: ["21211", "766778"],
  30050: ["25211", "!667"], //
  31051: ["21211", "66775!"], //
  32052: ["21211", "766676"],
  33053: ["21212", "677676"],
  34054: ["21212", "677676"],
  35055: ["21212", "768675"],
  36056: ["11212", "661661"],
  37057: ["33212", "586"], // 贾排除
  // 38058: ['33212', '586'], // 重複一樣的算一個 // 贾排除
  39059: ["13212", "851"],
  40060: ["21212", "867677"],
  41061: ["21412", "5?76?!"], //
  42062: ["11212", "618611"],
  43063: ["21212", "756667"],
  44064: ["11212", "661161"],
  45065: ["21212", "767676"],
  46066: ["13212", "161"],
  // 47067: ['13212', '161'],
  // 48068: ['13212', '161'],
  49069: ["21422", "786666"],
  49070: ["21422", "876666"],
  50071: ["13211", "511"],
  51072: ["13211", "161"],
  52073: ["11211", "161668"],
  52074: ["11211", "698186"],
  52075: ["11211", "911165"],
  52076: ["11211", "681118"],
  52077: ["31211", "886666"], // 贾：根据同器卦例归入一系
  52078: ["11211", "186855"],
  52079: ["11221", "681111"],
  53080: ["21221", "875687"],
  53081: ["21221", "867688"],
  53082: ["21221", "876867"],
  54083: ["21421", "666677"],
  54084: ["21421", "768658"],
  55085: ["11421", "181881"],
  55086: ["11421", "188188"],
  56087: ["34222", "8868"], // 唯一銅器四爻卦 // 贾排除
  57088: ["11223", "111111"],
  57089: ["11223", "611511"],
  57090: ["11223", "161111"],
  57091: ["11223", "111688"],
  57092: ["11223", "116111"],
  57093: ["11223", "116195"],
  57094: ["11223", "181611"],
  57095: ["11223", "811816"],
  57096: ["11223", "685618"],
  57097: ["11223", "198111"],
  57098: ["11223", "116881"],
  58099: ["11223", "118918"],
  58100: ["11223", "818186"],
  58101: ["11223", "618189"],
  58102: ["11223", "181811"],
  58103: ["11223", "111881"],
  59104: ["11223", "616161"],
  59105: ["11223", "161616"],
  60106: ["11223", "886818"],
  60107: ["11223", "816666"],
  60108: ["11223", "116111"],
  60109: ["11223", "111611"],
  61110: ["11232", "561158"],
};
// 楚簡
export const HexoChuList = {
  62111: "111 116 666 666", // 16
  63112: "666 ?66 66? ???", //
  64113: "118 156 181 161",
  65114: "616 666 119 961",
  66115: "666 661 116 666", // 16
  67116: "666 166 111 166", // 16
  68117: "565 666 666 616",
  69118: "816 666 111 161",
  70119: "??? 166 ?61 161", //
  71120: "666 611 666 616", // 16
  72121: "686 166 166 661",
  73122: "161 166 611 118",
  73123: "116 666 666 111", // 16
  74124: "166 666 611 166", // 16
  75125: "666 111 611 656",
  76126: "111 116 661 616", // 16
  77127: "111 666 188 666",
  78128: "166 666 666 666", // 16
  79129: "161 661 611 111", // 16
  80130: "166 666 161 666", // 16
  81131: "661 166 666 881",
  82132: "111 696 811 168",
  83133: "661 666 611 611", // 16
  84134: "166 811 666 811",
  85135: "166 116 165 866",
  86136: "611 661 161 161", // 16
  87137: "166 861 111 661",
  88138: "661 118 816 111",
};

// 排除一六的楚简IV
export const HexoChuList2 = {
  64113: "118 156 181 161",
  65114: "119 961",
  68117: "565 666",
  69118: "816 666",
  72121: "686 166",
  73122: "611 118",
  75125: "611 656",
  77127: "188 666",
  81131: "666 881",
  82132: "111 696 811 168",
  84134: "166 811 666 811",
  85135: "165 866",
  87137: "166 861",
  88138: "661 118 816 111",
};

export const HexoQinghuaList = [
  "111 111 116 161",
  "166 111 161 661",
  "661 616 616 611",
  "611 611 161 661",
  "661 616 616 659",
  "611 611 161 956",
  "661 666 116 161",
  "166 666 111 166",
  "616 661 161 611",
  "111 666 666 116",
  "161 166 116 666",
  "666 611 611 161",
  "616 661 661 916",
  "666 161 611 111",
  "661 616 459 116",
  "611 111 666 611",
  "111 666 116 811",
  "661 116 611 165",
  "616 161 611 916",
  "166 611 161 114",
  "666 666 666 116",
  "111 111 111 166",
  "611 111 666 666",
  "166 666 111 611",
  "661 161 616 611",
  "166 116 111 666",
  "666 166 161 611",
  "166 111 616 116",
  "166 111 611 661",
  "166 111 981 166",
  "666 116 116 616",
  "661 111 166 161",
  "166 111 161 666",
  "116 111 161 666",
  "611 166 116 111",
  "611 166 666 616",
  "611 166 116 616",
  "666 166 116 161",
  "611 111 666 166",
  "911 911 911 966",
  "911 911 911 866",
  "911 911 861 866",
  "911 911 966 866",
  "666 666 666 116",
  "666 666 666 161",
  "666 666 666 611",
  "666 666 666 966",
  "616 161 161 611",
  "616 161 161 116",
  "661 661 661 654",
  "666 111 116 661",
  "456 189 456 189",
  "981 654 981 654",
  "615 566 115 561",
  "616 161 661 611",
  "666 166 161 661",
  "111 611 616 116",
];

export const stdZhuxiFake = [0, 0, 6.25, 31.25, 43.75, 18.75]; // 朱熹朴素理论值
export const stdZhuxi = [0, 0, 4.0975609, 25.8888156, 45.7046802, 24.308943];
export const stdAFake = [0.21, 5.01, 34.74, 41.24, 16.68, 2.12]; // 四—九的贾连翔朴素理论值
export const stdBFake = [4.6875, 20.3125, 34.375, 28.125, 10.9375, 1.5625]; // 程浩朴素理论值
export const stdCFake = [3.125, 15.625, 31.25, 31.25, 15.625, 3.125]; // 杨胜男朴素理论值
export const stdDFake = [1.5625, 10.9375, 28.125, 34.375, 20.3125, 4.6875]; // 刘彬58朴素理论值
const ZhuxiBianList = [
  5.960464478, 3.576278687, 2.145767212, 1.287460327, 0.7724761963,
  0.4634857178, 0.2780914307,
]; // 朱熹筮法各类變卦概率%
const Compare = (n, loop) => {
  n = (n * 100) / loop;
  let min = Infinity;
  for (let i = 0; i < ZhuxiBianList.length; i++) {
    const result = Math.abs(n - ZhuxiBianList[i]);
    if (result < min) min = result;
  }
  return min;
};
// console.log(Compare(596, 10000))

export const ListPI = [0, 5.8824, 24.8366, 49.0196, 18.3007, 1.9608, 306]; // 几个分系的实际概率+爻数
export const ListPII = [0, 5.8824, 43.5294, 35.6863, 13.7255, 1.1765, 255];
export const ListPIII = [0, 2.9762, 44.6429, 40.4762, 10.119, 1.7857, 168];
export const ListPIV = [0, 4.6296, 38.8889, 37.963, 15.7407, 2.7778, 108];
export const ListPV = [0, 10.4167, 27.0833, 37.5, 20.8333, 4.1667, 60];
export const ListPVI = [0, 11.4286, 31.4286, 40.0, 17.1429, 0, 35];
export const ListPVandVI = [0, 10.8434, 28.9157, 38.5542, 19.2771, 2.4096, 95];
export const ListPVII = [0, 5.1724, 46.5517, 34.4828, 13.7931, 0, 58];
export const ListPVIII = [0, 4.1667, 39.5833, 35.4167, 16.6667, 4.1667, 48];
export const ListPVIIandVIII = [
  0, 4.717, 43.3962, 34.9057, 15.0943, 1.8868, 106,
];
export const ListPAll = [
  [0, 5.8824, 24.8366, 49.0196, 18.3007, 1.9608, 306],
  [0, 5.8824, 43.5294, 35.6863, 13.7255, 1.1765, 255],
  [0, 2.9762, 44.6429, 40.4762, 10.119, 1.7857, 168],
  [0, 4.6296, 38.8889, 37.963, 15.7407, 2.7778, 108],
  [0, 10.4167, 27.0833, 37.5, 20.8333, 4.1667, 60],
  [0, 11.4286, 31.4286, 40.0, 17.1429, 0, 35],
  [0, 10.8434, 28.9157, 38.5542, 19.2771, 2.4096, 95],
  [0, 5.1724, 46.5517, 34.4828, 13.7931, 0, 58],
  [0, 4.1667, 39.5833, 35.4167, 16.6667, 4.1667, 48],
  [0, 4.717, 43.3962, 34.9057, 15.0943, 1.8868, 106],
];

export const ListNI = [
  7011, 10018, 11019, 16025, 16026, 17027, 21034, 22035, 23039, 23040, 24042,
  24043, 24044, 24045, 26046, 36056, 39059, 42062, 44064, 46066, 50071, 51072,
  52073, 52074, 52075, 52076, 52077, 52078, 52079, 55085, 55086, 57088, 57089,
  57090, 57091, 57092, 57093, 57094, 57095, 57096, 57097, 57098, 58099, 58100,
  58101, 58102, 58103, 59104, 59105, 60106, 60107, 60108, 60109, 61110,
];
export const ListNII = [
  3003, 4004, 4005, 4006, 5007, 6008, 6009, 6010, 7012, 8014, 8015, 8016, 9017,
  13021, 14022, 15023, 15024, 18028, 18029, 19030, 19031, 20032, 20033, 23036,
  23037, 23038, 23041, 27047, 28048, 29049, 30050, 31051, 32052, 33053, 34054,
  35055, 40060, 41061, 43063, 45065, 49069, 49070, 53080, 53081, 53082, 54083,
  54084,
];
export const ListNIII = [
  64113, 65114, 68117, 69118, 72121, 73122, 75125, 77127, 81131, 82132, 84134,
  85135, 87137, 88138,
]; // 楚简可用的
// 11113只有4例，太少
export const ListNV = [
  22035, 24042, 24043, 24044, 42062, 52073, 52074, 52075, 52076, 52078,
]; // 11211
export const ListNVI = [27047, 29049, 31051, 35055, 40060, 43063]; //21210
export const ListNVandVI = [
  22035, 24042, 24043, 24044, 42062, 52073, 52074, 52075, 52076, 52078, 27047,
  29049, 31051, 35055, 40060, 43063,
];
export const ListNVII = [
  14022, 18028, 18029, 19030, 19031, 20032, 20033, 23037, 23038, 23041,
]; //21113
export const ListNVIII = [4004, 4005, 4006, 6009, 6010, 8014, 8015, 8016]; //21111
export const ListNVIIandVIII = [
  14022, 18028, 18029, 19030, 19031, 20032, 20033, 23037, 23038, 23041, 4004,
  4005, 4006, 6009, 6010, 8014, 8015, 8016,
];
export const ListNThree = [
  1001, 5007, 7012, 9017, 10018, 11019, 12020, 37057, 39059, 46066, 50071,
  51072,
]; // 三爻卦
export const ListNThree1 = [10018, 11019, 39059, 46066, 50071, 51072]; // 一系
export const ListNThree7 = [5007, 7012, 9017, 12020]; // 七系
// console.log(ListNII.length)

// 各算法在8-20%下的理论值，剔除了重复的百分比，不用在意到底是什么范围
export const stdA = [
  [0.71, 0.72, 0.71, 0.69, 0.69, 0.74, 0.72, 0.7, 0.72, 0.69, 0.76],
  [10.15, 10.26, 10.23, 10.04, 10.04, 10.28, 10.04, 9.82, 9.94, 10.14, 10.46],
  [42.94, 43.29, 43.12, 42.79, 42.73, 42.47, 42.13, 41.7, 41.48, 40.41, 40.24],
  [35.26, 34.98, 34.9, 35.28, 35.02, 34.94, 35.5, 35.89, 36.11, 35.99, 35.85],
  [10.0, 9.83, 10.07, 10.15, 10.49, 10.56, 10.58, 10.78, 10.66, 11.5, 11.41],
  [0.94, 0.91, 0.97, 1.04, 1.01, 1.01, 1.03, 1.1, 1.09, 1.27, 1.29],
];
export const stdB = [
  [5.45, 5.37, 5.18, 5.18, 4.94, 4.94, 5.12, 4.72, 4.64, 4.98, 4.74, 4.85],
  [
    21.73, 21.44, 21.19, 20.8, 20.76, 19.99, 20.3, 20.72, 20.46, 19.14, 18.84,
    19.98,
  ],
  [
    34.5, 34.24, 34.33, 34.0, 33.93, 34.14, 34.07, 33.23, 33.08, 34.67, 34.69,
    34.98,
  ],
  [
    26.85, 27.01, 27.26, 27.53, 27.7, 27.78, 27.5, 28.82, 28.97, 28.65, 29.04,
    28.64,
  ],
  [
    10.06, 10.4, 10.49, 10.84, 11.01, 11.57, 11.44, 11.03, 11.3, 11.03, 11.15,
    10.1,
  ],
  [1.41, 1.53, 1.55, 1.64, 1.66, 1.58, 1.58, 1.48, 1.55, 1.53, 1.54, 1.45],
];
export const stdC = [
  [3.71, 3.56, 3.55, 3.38, 3.38, 3.32, 3.31, 3.5, 3.22, 3.07, 3.29, 3.08, 3.26],
  [
    17.05, 16.65, 16.49, 16.18, 15.79, 16.05, 15.49, 15.85, 16.27, 15.79, 14.57,
    14.23, 15.47,
  ],
  [
    31.92, 31.7, 31.4, 31.26, 30.93, 30.79, 31.14, 31.29, 30.35, 30.06, 31.37,
    31.1, 31.58,
  ],
  [
    30.19, 30.48, 30.5, 30.65, 30.84, 30.77, 30.51, 30.33, 31.74, 32.03, 31.85,
    32.09, 31.95,
  ],
  [
    14.37, 14.75, 15.05, 15.37, 15.71, 15.66, 16.3, 15.95, 15.53, 16.04, 15.93,
    16.34, 14.76,
  ],
  [
    2.75, 2.87, 3.01, 3.17, 3.35, 3.41, 3.25, 3.07, 2.89, 3.03, 2.98, 3.17,
    2.99,
  ],
];
export const stdD = [
  [1.89, 1.82, 1.81, 1.65, 1.65, 1.62, 1.62, 1.79, 1.57, 1.6, 1.5, 1.59],
  [
    12.19, 11.98, 11.74, 11.38, 11.0, 11.13, 10.77, 11.17, 11.37, 10.02, 9.86,
    10.7,
  ],
  [
    29.22, 29.12, 28.7, 28.32, 28.0, 27.5, 28.01, 28.38, 27.18, 28.08, 27.72,
    27.97,
  ],
  [
    33.66, 33.8, 33.84, 33.91, 34.0, 33.99, 33.39, 33.33, 34.95, 35.04, 34.98,
    35.44,
  ],
  [
    18.88, 19.06, 19.49, 20.03, 20.37, 20.53, 21.22, 20.68, 20.5, 20.83, 21.22,
    19.69,
  ],
  [4.16, 4.22, 4.42, 4.71, 4.98, 5.24, 4.99, 4.65, 4.43, 4.43, 4.71, 4.62],
];

// 分系
const Devide = (list, screen) => {
  let result = "";
  for (const [key, value] of Object.entries(list)) {
    let k = 0,
      l = 0;
    for (let i = 0; i < 5; i++) {
      if (screen[i] === value[0][i] || screen[i] === "0") {
        k++;
      }
      for (let j = 0; j < value[1].length; j++) {
        if (
          value[1][j] === "4" ||
          value[1][j] === "5" ||
          value[1][j] === "8" ||
          value[1][j] === "9"
        ) {
          l++;
        }
      }
      if (k === 5 && l > 0) result += key + ", ";
    }
  }
  return result;
};
// console.log(Devide(HexoZhouList, '11111'))

// 各分系的概率
const Count = (list, screen) => {
  const nums = Array(10).fill(0);
  for (const [key, value] of Object.entries(list)) {
    for (let i = 0; i < value[1].length; i++) {
      if (screen) {
        if (screen.indexOf(+key) !== -1) nums[value[1][i]]++;
      } else {
        nums[value[1][i]]++;
      }
    }
  }
  let sum = 0;
  for (const n of nums) {
    sum += n;
  }
  const output = [
    sum,
    ((nums[1] * 100) / sum).toFixed(4) + ", " + nums[1],
    ...nums.slice(4).map((n) => ((n * 100) / sum).toFixed(4) + ", " + n),
  ];
  return output.join(" | ");
};
// console.log(Count(HexoZhouList, ListNVandVI))
// console.log(Count(HexoChuList2))

function AllDevide(input) {
  // 每個維度的數量
  let r = [];
  for (let i = 1; i <= input[0]; i++) {
    for (let j = 1; j <= input[1]; j++) {
      for (let k = 1; k <= input[2]; k++) {
        for (let l = 1; l <= input[3]; l++) {
          for (let m = 1; m <= input[4]; m++) {
            r.push(
              i.toString() +
                j.toString() +
                k.toString() +
                l.toString() +
                m.toString()
            );
          }
        }
      }
    }
  }
  return r;
}
// console.log(AllDevide('35453'))
