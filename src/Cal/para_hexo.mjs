export const HexoList64 = [
  "坤䷁",
  "剝䷖",
  "比䷇",
  "觀䷓",
  "豫䷏",
  "晉䷢",
  "萃䷬",
  "否䷋",
  "謙䷎",
  "艮䷳",
  "蹇䷦",
  "漸䷴",
  "小過䷽",
  "旅䷷",
  "咸䷞",
  "遯䷠",
  "師䷆",
  "蒙䷃",
  "坎䷜",
  "渙䷺",
  "解䷧",
  "未濟䷿",
  "困䷮",
  "訟䷅",
  "升䷭",
  "蠱䷑",
  "井䷯",
  "巽䷸",
  "恆䷟",
  "鼎䷱",
  "大過䷛",
  "姤䷫",
  "復䷗",
  "頤䷚",
  "屯䷂",
  "益䷩",
  "震䷲",
  "噬嗑䷔",
  "隨䷐",
  "无妄䷘",
  "明夷䷣",
  "賁䷕",
  "旣濟䷾",
  "家人䷤",
  "豐䷶",
  "離䷝",
  "革䷰",
  "同人䷌",
  "臨䷒",
  "損䷨",
  "節䷻",
  "中孚䷼",
  "歸妹䷵",
  "睽䷥",
  "兌䷹",
  "履䷉",
  "泰䷊",
  "大畜䷙",
  "需䷄",
  "小畜䷈",
  "大壯䷡",
  "大有䷍",
  "夬䷪",
  "乾䷀",
];
export const HexoList8 = [
  "坤☷",
  "艮☶",
  "坎☵",
  "巽☴",
  "震☳",
  "離☲",
  "兌☱",
  "乾☰",
];

const HexoZhouList = {
  // 类型；卦；是否可能是阴阳卦
  1001: ["13453", "161"],
  2002: ["35111", "666!"], // 贾排除
  3003: ["24111", "6776"],
  4004: ["21111", "757666"],
  4005: ["21111", "866587"],
  4006: ["21111", "787676"],
  5007: ["23111", "765"],
  6008: ["21211", "776766"], //76
  6009: ["21211", "678968"],
  6010: ["21211", "677679"],
  7011: ["11111", "116615"],
  7012: ["23111", "977"],
  7013: ["31111", "688866"], // 贾排除
  8014: ["21111", "666687"],
  8015: ["21111", "777867"],
  8016: ["21111", "686767"],
  9017: ["23112", "758"],
  10018: ["13112", "851"],
  11019: ["13112", "816"],
  12020: ["33112", "666"], // 贾排除
  13021: ["25112", "587!"], //
  14022: ["21112", "867666"],
  15023: ["21112", "??6667"], //
  15024: ["21112", "??7676"], //
  16025: ["11112", "611655"],
  16026: ["11112", "116616"],
  17027: ["11112", "151166"],
  18028: ["21112", "576877"],
  18029: ["21112", "776786"],
  19030: ["21113", "!67786"], //
  19031: ["21113", "67677!"],
  20032: ["21113", "667668"],
  20033: ["21113", "667675"],
  21034: ["11413", "188611"],
  22035: ["11213", "518166"],
  23036: ["21213", "766667"],
  23037: ["21213", "768767"],
  23038: ["21213", "665768"],
  23039: ["11213", "811166"],
  23040: ["11213", "811116"],
  23041: ["21213", "667668"],
  24042: ["11211", "681151"],
  24043: ["11211", "511681"],
  24044: ["11211", "668116"],
  24045: ["11211", "616661"],
  26046: ["11211", "116111"],
  27047: ["21211", "587878"],
  28048: ["21211", "766766"],
  29049: ["21211", "766778"],
  30050: ["25211", "!667"], //
  31051: ["21211", "66775!"], //
  32052: ["21211", "766676"],
  33053: ["21212", "677676"],
  34054: ["21212", "677676"],
  35055: ["21212", "768675"],
  36056: ["11212", "661661"],
  37057: ["33212", "586"], // 贾排除
  // 38058: ['33212', '586'], // 重複一樣的算一個 // 贾排除
  39059: ["13212", "851"],
  40060: ["21212", "867677"],
  41061: ["21412", "5?76?!"], //
  42062: ["11212", "618611"],
  43063: ["21212", "756667"],
  44064: ["11212", "661161"],
  45065: ["21212", "767676", true],
  46066: ["13212", "161"],
  // 47067: ['13212', '161'],
  // 48068: ['13212', '161'],
  49069: ["21212", "786666", true],
  49070: ["21212", "876666"],
  50071: ["13211", "511"],
  51072: ["13211", "161"],
  52073: ["11221", "161668"],
  52074: ["11221", "698186"],
  52075: ["11221", "911165"],
  52076: ["11221", "681118"],
  52077: ["11221", "886666"], // 贾：根据同器卦例归入一系
  52078: ["11221", "186855"],
  52079: ["11221", "681111"],
  53080: ["21221", "875687"],
  53081: ["21221", "867688"],
  53082: ["21221", "876867"],
  54083: ["21421", "666677"],
  54084: ["21421", "768658"],
  55085: ["11421", "181881", true],
  55086: ["11421", "188188", true],
  56087: ["34222", "8868"], // 唯一銅器四爻卦 // 贾排除
  57088: ["11223", "111111"],
  57089: ["11223", "611511"],
  57090: ["11223", "161111"],
  57091: ["11223", "111688"],
  57092: ["11223", "116111"],
  57093: ["11223", "116195"],
  57094: ["11223", "181611"],
  57095: ["11223", "811816"],
  57096: ["11223", "685618"],
  57097: ["11223", "198111"],
  57098: ["11223", "116881"],
  58099: ["11223", "118918"],
  58100: ["11223", "818186"],
  58101: ["11223", "618189"],
  58102: ["11223", "181811", true],
  58103: ["11223", "111881", true],
  59104: ["11223", "616161", true],
  59105: ["11223", "161616", true],
  60106: ["11223", "886818", true],
  60107: ["11223", "816666", true],
  60108: ["11223", "116111", true],
  60109: ["11223", "111611", true],
  61110: ["11222", "561158"],
};
// 楚簡
const HexoChuList = {
  62111: "111116 666666", // 16
  63112: "666?66 66????", //
  64113: "118156 181161",
  65114: "616666 119961",
  66115: "666661 116666", // 16
  67116: "666166 111166", // 16
  68117: "565666 666616",
  69118: "816666 111161",
  70119: "???166 ?61161", //
  71120: "666611 666616", // 16
  72121: "686166 166661",
  73122: "161166 611118",
  73123: "116666 666111", // 16
  74124: "166666 611166", // 16
  75125: "666111 611656",
  76126: "111116 661616", // 16
  77127: "111666 188666",
  78128: "166666 666666", // 16
  79129: "161661 611111", // 16
  80130: "166666 161666", // 16
  81131: "661166 666881",
  82132: "111696 811168",
  83133: "661666 611611", // 16
  84134: "166811 666811",
  85135: "166116 165866",
  86136: "611661 161161", // 16
  87137: "166861 111661",
  88138: "661118 816111",
};

// 排除一六的楚简IV
const HexoChuList2 = {
  64113: "118156 181161",
  65114: "119961",
  68117: "565666",
  69118: "816666",
  72121: "686166",
  73122: "611118",
  75125: "611656",
  77127: "188666",
  81131: "666881",
  82132: "111696 811168",
  84134: "166811 666811",
  85135: "165866",
  87137: "166861",
  88138: "661118 816111",
};
// 排除一六八的楚简
const HexoChuList3 = {
  64113: "118156",
  65114: "119961",
  68117: "565666",
  75125: "611656",
  82132: "111696",
  85135: "165866",
};

const HexoQinghuaList = [
  "111111 116161",
  "166111 161661",
  "661616 616611",
  "611611 161661",
  "661616 616659",
  "611611 161956",
  "661666 116161",
  "166666 111166",
  "616661 161611",
  "111666 666116",
  "161166 116666",
  "666611 611161",
  "616661 661916",
  "666161 611111",
  "661616 459116",
  "611111 666611",
  "111666 116811",
  "661116 611165",
  "616161 611916",
  "166611 161114",
  "666666 666116",
  "111111 111166",
  "611111 666666",
  "166666 111611",
  "661161 616611",
  "166116 111666",
  "666166 161611",
  "166111 616116",
  "166111 611661",
  "166111 981166",
  "666116 116616",
  "661111 166161",
  "166111 161666",
  "116111 161666",
  "611166 116111",
  "611166 666616",
  "611166 116616",
  "666166 116161",
  "611111 666166",
  "911911 911966",
  "911911 911866",
  "911911 861866",
  "911911 966866",
  "666666 666116",
  "666666 666161",
  "666666 666611",
  "666666 666966",
  "616161 161611",
  "616161 161116",
  "661661 661654",
  "666111 116661",
  "456189 456189",
  "981654 981654",
  "615566 115561",
  "616161 661611",
  "666166 161661",
  "111611 616116",
];

const stdZhuxiFake = [0, 0, 6.25, 31.25, 43.75, 18.75]; // 朱熹朴素理论值
const stdZhuxi = [0, 0, 4.0975609, 25.8888156, 45.7046802, 24.308943];
const stdAFake = [0.21, 5.01, 34.74, 41.24, 16.68, 2.12]; // 四—九的贾连翔朴素理论值
const stdBFake = [4.6875, 20.3125, 34.375, 28.125, 10.9375, 1.5625]; // 程浩朴素理论值
const stdCFake = [3.125, 15.625, 31.25, 31.25, 15.625, 3.125]; // 杨胜男朴素理论值
const stdDFake = [1.5625, 10.9375, 28.125, 34.375, 20.3125, 4.6875]; // 刘彬58朴素理论值
const ZhuxiBianList = [
  5.960464478, 3.576278687, 2.145767212, 1.287460327, 0.7724761963,
  0.4634857178, 0.2780914307,
]; // 朱熹筮法各类變卦概率%
const Compare = (n, loop) => {
  n = (n * 100) / loop;
  let min = Infinity;
  for (let i = 0; i < ZhuxiBianList.length; i++) {
    const result = Math.abs(n - ZhuxiBianList[i]);
    if (result < min) min = result;
  }
  return min;
};
// console.log(Compare(596, 10000))

const ListN1A = [
  7011, 10018, 11019, 16025, 16026, 17027, 21034, 22035, 23039, 23040, 24042,
  24043, 24044, 24045, 26046, 36056, 39059, 42062, 44064, 46066, 50071, 51072,
  52073, 52074, 52075, 52076, 52077, 52078, 52079, 55085, 55086, 57088, 57089,
  57090, 57091, 57092, 57093, 57094, 57095, 57096, 57097, 57098, 58099, 58100,
  58101, 58102, 58103, 59104, 59105, 60106, 60107, 60108, 60109, 61110,
];
const ListN7A = [
  3003, 4004, 4005, 4006, 5007, 6008, 6009, 6010, 7012, 8014, 8015, 8016, 9017,
  13021, 14022, 15023, 15024, 18028, 18029, 19030, 19031, 20032, 20033, 23036,
  23037, 23038, 23041, 27047, 28048, 29049, 30050, 31051, 32052, 33053, 34054,
  35055, 40060, 41061, 43063, 45065, 49069, 49070, 53080, 53081, 53082, 54083,
  54084,
];
const ListN1C = [
  64113, 65114, 68117, 69118, 72121, 73122, 75125, 77127, 81131, 82132, 84134,
  85135, 87137, 88138,
]; // 楚简可用的
// 11113只有4例，太少
const ListN1Z = [
  22035, 23039, 23040, 24042, 24043, 24044, 24045, 26046, 36056, 42062, 44064,
]; // 11210
const ListN7Z = [
  6008, 6009, 6010, 23036, 23037, 23038, 23041, 27047, 28048, 29049, 31051,
  32052, 33053, 34054, 35055, 40060, 43063, 49070,
]; //21210
const ListN7Ya = [4004, 4005, 4006, 8014, 8015, 8016]; //21111
const ListN7Yb = [14022, 15023, 15024, 18028, 18029]; //21112
const ListN7Yc = [19030, 19031, 20032, 20033]; // 21223
const ListN7Y = [
  14022, 15023, 15024, 18028, 18029, 19030, 19031, 20032, 20033, 4004, 4005,
  4006, 8014, 8015, 8016,
]; // 21110
const ListN7YZ = [
  4004, 4005, 4006, 8014, 8015, 8016, 14022, 15023, 15024, 18028, 18029, 19030,
  19031, 20032, 20033, 6008, 6009, 6010, 23036, 23037, 23038, 23041, 27047,
  28048, 29049, 31051, 32052, 33053, 34054, 35055, 40060, 43063, 49070,
];
const ListN1Y = [7011, 16025, 16026, 17027]; // 11110
const ListN1YZ = [
  7011, 16025, 16026, 17027, 22035, 23039, 23040, 24042, 24043, 24044, 24045,
  26046, 36056, 42062, 44064,
];
const ListN1YZS1 = [
  7011, 16025, 17027, 22035, 23039, 23040, 24042, 24043, 24044, 42062,
];
const ListN1YZS2 = [7011, 16025, 17027, 22035, 24042, 24043];
const ListN7YZS1 = [
  4004, 4005, 4006, 8014, 8015, 8016, 14022, 15023, 15024, 18028, 18029, 19030,
  19031, 20032, 20033, 6009, 6010, 23037, 23038, 23041, 27047, 29049, 31051,
  35055, 40060, 43063, 49070,
]; // 20010, true
const ListN7YZS2 = [
  4004, 4005, 15023, 15024, 18028, 19030, 19031, 20033, 6009, 6010, 23038,
  27047, 31051, 35055, 43063,
];
const ListN1Mc = [
  57088, 57089, 57090, 57091, 57092, 57093, 57094, 57095, 57096, 57097, 57098,
  58099, 58100, 58101,
]; // 11023
const ListN1Ma = [52073, 52074, 52075, 52076, 52077, 52078, 52079]; // 11021
const ListN1MS1 = [
  52073, 52074, 52075, 52076, 52077, 52078, 52079, 57089, 57091, 57093, 57094,
  57095, 57096, 57097, 57098, 58099, 58100, 58101, 61110,
]; //10020
const ListN1MS2 = [
  52074, 52075, 52077, 52078, 57089, 57093, 57096, 57097, 58099, 58101, 61110,
];
const ListN7M = [53080, 53081, 53082, 54083, 54084]; // 21020
const ListNDuo = [
  18028, 18029, 4004, 4006, 23036, 23037, 23038, 23039, 23040, 23041, 16025,
  16026, 24042, 24043, 25044, 25045, 52074, 52075, 52076, 52077, 52078, 52079,
  54083, 54084,
];
const ListNThree = [
  1001, 5007, 7012, 9017, 10018, 11019, 12020, 37057, 39059, 46066, 50071,
  51072,
]; // 三爻卦
const ListNThree1 = [10018, 11019, 39059, 46066, 50071, 51072]; // 一系
const ListNThree7 = [5007, 7012, 9017, 12020]; // 七系
// console.log(ListNII.length)

const ListP1A = [0, 5.8824, 24.8366, 49.0196, 18.3007, 1.9608, 306]; // 几个分系的实际概率+爻数
const ListP7A = [0, 5.8824, 43.5294, 35.6863, 13.7255, 1.1765, 255];
const ListP1C = [0, 2.9762, 44.6429, 40.4762, 10.119, 1.7857, 168];
const ListP1CS = [0, 4.6296, 38.8889, 37.963, 15.7407, 2.7778, 108];
const ListP1Z = [0, 4.5455, 36.3636, 48.4848, 10.6061, 0, 66];
const ListP7Z = [0, 4.6729, 45.7944, 36.4486, 11.215, 1.8692, 107];
const ListP7Y = [0, 4.7619, 45.2381, 36.9048, 13.0952, 0, 84];
const ListP7Ya = [0, 5.5556, 41.6667, 36.1111, 16.6667, 0, 36];
const ListP7Yb = [0, 3.8462, 46.1538, 38.4615, 11.5385, 0, 26];
const ListP7Yc = [0, 4.5455, 50.0, 36.3636, 9.0909, 0, 22];
const ListP7YZ = [0, 4.712, 45.5497, 36.6492, 12.0419, 1.0471, 191];
const ListP1Y = [0, 16.6667, 37.5, 45.8333, 0, 0, 24];
const ListP1YZ = [0, 7.7778, 36.6667, 47.7778, 7.7778, 0, 90];
const ListP1M = [0, 6.0606, 19.697, 48.4848, 21.2121, 4.5455, 132];
const ListP1Mc = [0, 3.5714, 14.2857, 57.1429, 20.2381, 4.7619, 84];
const ListP1Ma = [0, 7.1429, 30.9524, 33.3333, 23.8095, 4.7619, 42];
const ListP7M = [0, 6.6667, 36.6667, 26.6667, 30.0, 0, 30];
const ListPDuo = [0, 8.3333, 35.6061, 38.6364, 15.9091, 1.5152, 132];
const ListP1YZS1 = [0, 11.67, 30.0, 46.67, 11.67, 0, 60];
const ListP1YZS2 = [0, 19.44, 27.78, 44.44, 8.33, 0, 36];
const ListP7YZS1 = [0, 5.81, 42.58, 35.48, 14.84, 1.29, 155];
const ListP7YZS2 = [0, 10.84, 38.55, 34.94, 13.25, 2.41, 83];
const ListP1MS1 = [0, 7.02, 21.05, 42.11, 24.56, 5.26, 114];
const ListP1MS2 = [0, 12.12, 21.21, 36.36, 21.21, 9.09, 66];
export const ListPAll = [
  // 不考慮4
  [4.6296, 38.8889, 37.963, 15.7407, 2.7778, 108],
  [5.81, 42.58, 35.48, 14.84, 1.29, 155],
  [10.84, 38.55, 34.94, 13.25, 2.41, 83],
  [7.02, 21.05, 42.11, 24.56, 5.26, 114],
  [8.3333, 35.6061, 38.6364, 15.9091, 1.5152, 132],
];
// 1CS, 7YZS1, 7YZS2, 1MS1, Duo

// console.log(Test1(2, 39, 4, 3, 1, true, [8, 20], 100000000));
// console.log(Test1(2, 40, 4, 3, 1, true, [8, 20], 100000000));
// console.log(Test1(2, 51, 4, 4, 1, true, [8, 20], 100000000));
// console.log(Test1(2, 52, 4, 4, 1, true, [8, 20], 100000000));
// console.log(Test1(2, 53, 4, 4, 1, true, [8, 20], 100000000)); // 李忠林
// console.log(Test1(2, 44, 5, 3, 1, true, [8, 20], 100000000));
// console.log(Test1(2, 58, 5, 4, 1, true, [8, 20], 100000000));

// console.log(Test1(2, 42, 5, 3, 1, true, [8, 20], 100000000));
// console.log(Test1(2, 43, 5, 3, 1, true, [8, 20], 100000000));
// console.log(Test1(2, 55, 5, 4, 1, true, [8, 9], 100000000)); // 程浩
// console.log(Test1(2, 56, 5, 4, 1, true, [8,20], 100000000)); // 杨胜男
// console.log(Test1(2, 57, 5, 4, 1, true, [8,20], 100000000)); // 刘彬58

// console.log(Test1(3, 38, 3, 3, 1, true, [8, 20], 100000000));
// console.log(Test1(3, 49, 3, 4, 1, true, [8, 20], 100000000)); // 贾连翔
// console.log(Test1(3, 50, 3, 4, 1, true, [8, 20], 100000000));
export const ListPSheleAll = [
  // [
  //   [21.52, 40.09, 28.34, 8.98, 1.07],
  //   [21.52, 40.09, 28.34, 8.98, 1.07],
  //   [21.52, 40.09, 28.34, 8.98, 1.07],
  //   [20.87, 39.83, 28.82, 9.34, 1.14],
  //   [20.87, 39.48, 28.84, 9.59, 1.22],
  //   [20.43, 39.67, 28.95, 9.67, 1.27],
  //   [20.43, 38.99, 29.41, 9.84, 1.34],
  //   [19.48, 39.51, 29.11, 10.56, 1.34],
  //   [20.21, 39.68, 28.67, 10.19, 1.24],
  //   [20.22, 38.62, 30.15, 9.88, 1.14],
  //   [19.48, 38.28, 30.67, 10.34, 1.23],
  //   [20.44, 38.03, 30.57, 9.79, 1.18],
  //   [19.11, 39.44, 30.32, 9.92, 1.21],
  // ],
  [
    [10.91, 35.86, 36.19, 14.87, 2.18],
    [10.9, 35.86, 36.19, 14.87, 2.18],
    [10.6, 35.74, 36.41, 15.03, 2.21],
    [10.6, 35.74, 36.41, 15.03, 2.21],
    [10.6, 35.05, 36.46, 15.53, 2.36],
    [9.89, 34.93, 36.58, 16.02, 2.59],
    [9.88, 34.22, 37.15, 16.03, 2.72],
    [10.08, 34.8, 35.8, 16.7, 2.63],
    [10.27, 34.79, 35.84, 16.56, 2.53],
    [10.27, 34.05, 37.26, 16.09, 2.33],
    [9.93, 33.9, 37.5, 16.31, 2.37],
    [10.42, 33.77, 37.96, 15.59, 2.26],
    [9.35, 34.05, 37.96, 16.26, 2.38],
  ],
  [
    [10.43, 32.36, 36.72, 17.62, 2.87],
    [10.44, 32.36, 36.71, 17.62, 2.87],
    [10.27, 32.06, 36.74, 17.91, 3.01],
    [10.27, 31.89, 36.59, 18.09, 3.17],
    [9.87, 31.71, 36.94, 18.28, 3.2],
    [9.87, 30.89, 37.0, 18.84, 3.41],
    [9.33, 31.25, 36.48, 19.69, 3.23],
    [9.33, 31.39, 36.65, 19.56, 3.06],
    [9.76, 29.82, 38.11, 19.27, 3.04],
    [9.73, 29.83, 38.1, 19.31, 3.03],
    [8.63, 31.23, 38.16, 18.99, 2.99],
    [8.64, 30.96, 38.04, 19.19, 3.17],
    [9.59, 31.45, 38.45, 17.52, 2.99],
  ],
  [
    [7.11, 26.42, 37.27, 23.57, 5.63],
    [7.11, 26.42, 37.27, 23.57, 5.63],
    [6.79, 25.86, 37.33, 24.14, 5.89],
    [6.79, 25.51, 37.03, 24.47, 6.19],
    [6.42, 25.19, 37.02, 24.83, 6.55],
    [6.42, 24.37, 37.06, 25.17, 6.98],
    [6.27, 25.01, 36.12, 25.94, 6.65],
    [6.27, 25.33, 36.46, 25.64, 6.3],
    [6.69, 24.16, 38.02, 25.22, 5.92],
    [6.67, 24.17, 38.0, 25.27, 5.9],
    [5.7, 24.97, 38.06, 25.47, 5.81],
    [5.71, 24.5, 37.73, 25.89, 6.17],
    [6.2, 24.57, 38.72, 24.35, 6.16],
  ],
  // [
  //   [3.63, 20.2, 37.86, 29.8, 8.5],
  //   [3.63, 20.2, 37.86, 29.8, 8.5],
  //   [3.48, 19.94, 37.88, 30.08, 8.63],
  //   [3.48, 19.43, 37.44, 30.57, 9.08],
  //   [3.13, 18.97, 37.08, 31.07, 9.74],
  //   [3.13, 18.16, 37.13, 31.2, 10.38],
  //   [3.06, 18.47, 35.74, 32.5, 10.24],
  //   [3.06, 18.97, 36.25, 32.02, 9.71],
  //   [3.43, 18.17, 37.93, 31.51, 8.96],
  //   [3.24, 17.87, 37.88, 31.9, 9.1],
  //   [2.93, 19.05, 37.96, 31.59, 8.47],
  //   [2.77, 18.03, 37.43, 32.6, 9.18],
  //   [3.01, 18.09, 38.99, 30.77, 9.15],
  // ],
  // [
  //   [21.52, 40.08, 28.34, 8.98, 1.07],
  //   [21.52, 40.09, 28.34, 8.98, 1.07],
  //   [21.52, 40.08, 28.34, 8.98, 1.07],
  //   [20.87, 39.83, 28.82, 9.34, 1.14],
  //   [20.87, 39.48, 28.84, 9.59, 1.22],
  //   [20.43, 39.67, 28.95, 9.67, 1.27],
  //   [20.43, 38.99, 29.41, 9.84, 1.34],
  //   [19.48, 39.5, 29.12, 10.56, 1.34],
  //   [20.22, 39.67, 28.68, 10.19, 1.24],
  //   [20.22, 38.62, 30.15, 9.87, 1.14],
  //   [19.48, 38.28, 30.67, 10.33, 1.23],
  //   [20.43, 38.03, 30.57, 9.79, 1.17],
  //   [19.11, 39.44, 30.33, 9.92, 1.21],
  // ],
  // [
  //   [7.11, 26.42, 37.27, 23.57, 5.62],
  //   [7.11, 26.42, 37.27, 23.57, 5.63],
  //   [6.79, 25.86, 37.32, 24.14, 5.89],
  //   [6.79, 25.51, 37.03, 24.48, 6.19],
  //   [6.42, 25.19, 37.02, 24.83, 6.55],
  //   [6.42, 24.37, 37.07, 25.17, 6.98],
  //   [6.27, 25.02, 36.13, 25.93, 6.65],
  //   [6.27, 25.32, 36.46, 25.64, 6.3],
  //   [6.68, 24.17, 38.02, 25.21, 5.91],
  //   [6.66, 24.17, 37.99, 25.26, 5.9],
  //   [5.7, 24.96, 38.06, 25.47, 5.81],
  //   [5.71, 24.5, 37.73, 25.89, 6.17],
  //   [6.2, 24.56, 38.73, 24.35, 6.16],
  // ],
  // [
  //   [14.74, 34.09, 32.01, 15.19, 3.63, 0.35],
  //   [14.74, 34.08, 32.02, 15.18, 3.63, 0.35],
  //   [14.34, 33.74, 32.24, 15.55, 3.77, 0.37],
  //   [14.34, 33.52, 32.15, 15.71, 3.89, 0.39],
  //   [14.07, 33.52, 32.27, 15.78, 3.95, 0.41],
  //   [14.07, 33.11, 32.35, 16.01, 4.03, 0.42],
  //   [13.73, 33.27, 32.21, 16.23, 4.13, 0.45],
  //   [13.95, 32.49, 32.63, 16.14, 4.36, 0.43],
  //   [13.95, 32.87, 32.68, 15.9, 4.21, 0.4],
  //   [13.3, 32.97, 32.0, 17.12, 4.22, 0.39],
  //   [13.3, 32.72, 31.88, 17.3, 4.38, 0.42],
  //   [13.31, 33.52, 31.63, 17.02, 4.12, 0.41],
  //   [13.33, 31.7, 33.56, 16.91, 4.09, 0.4],
  // ],
  // [
  //   [7.47, 27.88, 36.0, 21.68, 6.27, 0.71],
  //   [7.47, 27.88, 35.99, 21.68, 6.27, 0.71],
  //   [7.27, 27.72, 36.1, 21.85, 6.34, 0.72],
  //   [7.27, 27.29, 35.94, 22.17, 6.58, 0.76],
  //   [6.83, 27.01, 35.98, 22.5, 6.85, 0.83],
  //   [6.83, 26.59, 36.13, 22.67, 6.93, 0.86],
  //   [7.08, 27.05, 35.49, 22.61, 6.89, 0.88],
  //   [7.08, 26.09, 36.01, 22.53, 7.42, 0.88],
  //   [7.08, 26.64, 36.13, 22.19, 7.15, 0.82],
  //   [6.77, 26.71, 35.25, 23.52, 7.0, 0.76],
  //   [6.77, 26.21, 35.02, 23.87, 7.31, 0.82],
  //   [6.53, 26.85, 34.89, 23.93, 7.01, 0.8],
  //   [6.43, 25.18, 36.6, 23.86, 7.11, 0.82],
  // ],
  // [
  //   [5.45, 21.73, 34.51, 26.85, 10.06, 1.41],
  //   [5.45, 21.73, 34.51, 26.85, 10.06, 1.41],
  //   [5.37, 21.44, 34.24, 27.02, 10.4, 1.54],
  //   [5.18, 21.19, 34.33, 27.26, 10.5, 1.55],
  //   [5.18, 20.81, 34.0, 27.54, 10.84, 1.64],
  //   [4.94, 20.76, 33.93, 27.71, 11.01, 1.66],
  //   [4.94, 20.0, 34.14, 27.77, 11.57, 1.58],
  //   [5.12, 20.3, 34.06, 27.5, 11.44, 1.58],
  //   [4.72, 20.72, 33.24, 28.81, 11.03, 1.48],
  //   [4.64, 20.46, 33.08, 28.97, 11.3, 1.55],
  //   [4.98, 19.14, 34.67, 28.64, 11.03, 1.53],
  //   [4.74, 18.84, 34.69, 29.04, 11.15, 1.54],
  //   [4.85, 19.98, 34.98, 28.64, 10.11, 1.45],
  // ],
  [
    [3.71, 17.06, 31.92, 30.18, 14.38, 2.76],
    [3.55, 16.65, 31.7, 30.47, 14.75, 2.87],
    [3.56, 16.49, 31.4, 30.5, 15.05, 3.01],
    [3.38, 16.18, 31.26, 30.65, 15.37, 3.16],
    [3.38, 15.8, 30.93, 30.84, 15.71, 3.35],
    [3.32, 16.05, 30.79, 30.78, 15.66, 3.41],
    [3.32, 15.49, 31.14, 30.52, 16.28, 3.25],
    [3.5, 15.85, 31.3, 30.33, 15.95, 3.08],
    [3.22, 16.28, 30.35, 31.73, 15.53, 2.89],
    [3.07, 15.78, 30.06, 32.03, 16.03, 3.03],
    [3.29, 14.57, 31.37, 31.85, 15.93, 2.98],
    [3.08, 14.23, 31.11, 32.09, 16.33, 3.17],
    [3.26, 15.47, 31.57, 31.94, 14.77, 2.99],
  ],
  [
    [1.89, 12.18, 29.23, 33.66, 18.89, 4.16],
    [1.82, 11.99, 29.12, 33.79, 19.07, 4.22],
    [1.82, 11.75, 28.69, 33.84, 19.49, 4.41],
    [1.65, 11.38, 28.32, 33.91, 20.02, 4.71],
    [1.65, 11.01, 28.0, 34.0, 20.37, 4.98],
    [1.62, 11.12, 27.5, 33.99, 20.52, 5.24],
    [1.62, 10.78, 28.01, 33.39, 21.23, 4.99],
    [1.79, 11.17, 28.38, 33.33, 20.68, 4.65],
    [1.57, 11.37, 27.19, 34.95, 20.49, 4.43],
    [1.57, 11.34, 27.2, 34.93, 20.53, 4.43],
    [1.6, 10.02, 28.09, 35.03, 20.83, 4.43],
    [1.5, 9.86, 27.71, 34.99, 21.23, 4.71],
    [1.59, 10.7, 27.97, 35.42, 19.7, 4.62],
  ],
  [
    [0.96, 10.28, 36.45, 42.59, 9.17, 0.56],
    [0.96, 10.28, 36.45, 42.58, 9.17, 0.56],
    [0.96, 10.28, 36.45, 42.58, 9.16, 0.56],
    [0.97, 10.33, 36.53, 42.48, 9.13, 0.56],
    [0.97, 10.33, 36.53, 42.48, 9.13, 0.56],
    [0.96, 10.26, 36.28, 42.41, 9.49, 0.6],
    [1.0, 10.62, 36.98, 41.54, 9.22, 0.64],
    [0.99, 10.56, 36.67, 41.42, 9.72, 0.64],
    [0.95, 10.27, 36.45, 41.99, 9.7, 0.64],
    [1.01, 10.38, 35.9, 42.42, 9.69, 0.59],
    [1.01, 10.38, 35.87, 42.26, 9.85, 0.62],
    [0.91, 9.76, 35.98, 42.48, 10.17, 0.71],
    [0.96, 9.81, 34.99, 43.28, 10.17, 0.8],
  ],
  [
    [0.71, 10.15, 42.94, 35.26, 10.0, 0.94],
    [0.71, 10.15, 42.95, 35.26, 10.0, 0.94],
    [0.71, 10.15, 42.94, 35.26, 10.0, 0.94],
    [0.72, 10.26, 43.3, 34.98, 9.83, 0.91],
    [0.71, 10.22, 43.12, 34.9, 10.07, 0.97],
    [0.7, 10.04, 42.79, 35.28, 10.15, 1.04],
    [0.69, 10.04, 42.74, 35.02, 10.49, 1.01],
    [0.74, 10.28, 42.47, 34.94, 10.56, 1.01],
    [0.72, 10.04, 42.13, 35.5, 10.58, 1.02],
    [0.7, 9.83, 41.7, 35.89, 10.78, 1.1],
    [0.71, 9.94, 41.48, 36.11, 10.66, 1.09],
    [0.69, 10.14, 40.42, 35.98, 11.5, 1.27],
    [0.76, 10.46, 40.23, 35.85, 11.41, 1.29],
  ],
  [
    [0.44, 6.63, 31.93, 43.87, 15.5, 1.64],
    [0.44, 6.63, 31.93, 43.87, 15.5, 1.64],
    [0.44, 6.65, 32.01, 43.8, 15.46, 1.63],
    [0.44, 6.65, 32.01, 43.81, 15.46, 1.63],
    [0.46, 6.89, 32.67, 42.91, 15.39, 1.67],
    [0.44, 6.75, 32.36, 43.19, 15.47, 1.8],
    [0.43, 6.62, 31.89, 43.16, 16.12, 1.78],
    [0.46, 6.8, 31.85, 43.01, 16.12, 1.75],
    [0.43, 6.41, 30.89, 43.84, 16.6, 1.83],
    [0.43, 6.37, 31.15, 43.72, 16.44, 1.89],
    [0.4, 6.04, 29.71, 44.99, 16.89, 1.97],
    [0.4, 6.39, 29.71, 43.9, 17.44, 2.15],
    [0.47, 6.97, 30.92, 42.87, 16.65, 2.12],
  ],
];
const IsOneSix = (str) => {
  const set = new Set(str);
  if (set.size > 2 || set.size === 0) return false;
  if (set.size === 1) return true;
  return (
    (set.has("1") && set.has("6")) ||
    (set.has("1") && set.has("8")) ||
    (set.has("7") && set.has("6")) ||
    (set.has("7") && set.has("8"))
  );
};
const IsOneSixEight = (str) => {
  const set = new Set(str);
  if (set.size > 3 || set.size === 0) return false;
  if (set.size === 1) return true;
  if (set.size === 3) {
    return (
      (set.has("1") && set.has("6") && set.has("8")) ||
      (set.has("7") && set.has("6") && set.has("8"))
    );
  } else {
    return (
      (set.has("1") && set.has("6")) ||
      (set.has("1") && set.has("8")) ||
      (set.has("7") && set.has("6")) ||
      (set.has("7") && set.has("8"))
    );
  }
};

// console.log(IsOneSix("116615"));
// console.log(IsOneSixEight("116615"));
// !: 不知道後面還有沒有文字. ?: 殘損. 书中编号是xx-xxx
// 1数字：1一，2七，3未出现一七
// 2形式：1六爻单卦，2六爻对卦，3三爻，4四爻，5未知
// 3地域：1殷墟，2周原宗周，3楚，4其他
// 4时间：1晚商早周，2西周中晚期，3春秋，4战国，5其他
// 5材质：1骨，2铜，3陶石 // 陶範算銅
//    V: 11210
//   VI: 21210
//  VII: 21110 A 21111. B 21112. C 21113
// VIII: 21111
//   IX: 11023
//    X: 11021
// 分系
const Typology = (list, screen, Type) => {
  let result = "";
  for (const [key, value] of Object.entries(list)) {
    let k = 0;
    for (let i = 0; i < 5; i++) {
      if (screen[i] === value[0][i] || screen[i] === "0") k++;
    }
    if (k === 5 && value[2] !== true) {
      if (Type === 1) {
        if (IsOneSix(value[1]) === false) result += key + ", ";
      } else if (Type === 2) {
        if (IsOneSixEight(value[1]) === false) result += key + ", ";
      } else {
        result += key + ", ";
      }
    }
  }
  return result;
};
// console.log(Typology(HexoZhouList, "11020", 2));
//
// 各分系的概率
const Count = (list, screen) => {
  if (screen) screen = screen.flat();
  const nums = Array(10).fill(0);
  for (const [key, value] of Object.entries(list)) {
    if (value instanceof Array) {
      for (let i = 0; i < value[1].length; i++) {
        if (screen) {
          if (screen.indexOf(+key) !== -1) nums[+value[1][i]]++;
        } else {
          nums[+value[1][i]]++;
        }
      }
    } else {
      for (let i = 0; i < value.length; i++) {
        const valueDeal = value.split(" ").join(""); // 去掉空格
        if (screen) {
          if (screen.indexOf(+key) !== -1) nums[+valueDeal[i]]++;
        } else {
          nums[+valueDeal[i]]++;
        }
      }
    }
  }
  let sum = 0;
  for (const n of nums) {
    sum += n;
  }
  const output = [
    sum,
    ((nums[1] * 100) / sum).toFixed(4) + ", " + nums[1],
    ...nums.slice(4).map((n) => ((n * 100) / sum).toFixed(4) + ", " + n),
  ];
  return output.join(" | ");
};
// console.log(Count(HexoZhouList));
// console.log(Count(HexoZhouList, [ListN1MS2]));
// console.log(Count(HexoChuList3));
// console.log(Count(HexoQinghuaList));

function AllDevide(input) {
  // 每個維度的數量
  let r = [];
  for (let i = 1; i <= input[0]; i++) {
    for (let j = 1; j <= input[1]; j++) {
      for (let k = 1; k <= input[2]; k++) {
        for (let l = 1; l <= input[3]; l++) {
          for (let m = 1; m <= input[4]; m++) {
            r.push(
              i.toString() +
                j.toString() +
                k.toString() +
                l.toString() +
                m.toString()
            );
          }
        }
      }
    }
  }
  return r;
}
// console.log(AllDevide('35453'))
